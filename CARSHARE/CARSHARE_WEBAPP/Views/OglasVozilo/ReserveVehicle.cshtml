@using Newtonsoft.Json
@model CARSHARE_WEBAPP.ViewModels.VehicleReservationVM

@{
    var reservedDayStrings = Model.ReservedDates
        .Select(d => d.Date.ToString("yyyy-MM-dd"))
        .ToHashSet();

    var allDatesReserved = true;
    for (var date = Model.DozvoljeniPocetak.Date; date <= Model.DozvoljeniKraj.Date; date = date.AddDays(1))
    {
        if (!reservedDayStrings.Contains(date.ToString("yyyy-MM-dd")))
        {
            allDatesReserved = false;
            break;
        }
    }
}

<h2>Reserve vehicle</h2>

@if (!allDatesReserved)
{
    <form asp-action="ReserveVehicle" method="post">
        <input type="hidden" asp-for="OglasVoziloId" />
        <input type="hidden" asp-for="DozvoljeniPocetak" />
        <input type="hidden" asp-for="DozvoljeniKraj" />

        <div class="form-group">
            <label for="DatumPocetkaRezervacije">Datum početka</label>
            <input type="date" id="startDate" class="form-control" asp-for="DatumPocetkaRezervacije"
                   min="@Model.DozvoljeniPocetak.ToString("yyyy-MM-dd")"
                   max="@Model.DozvoljeniKraj.ToString("yyyy-MM-dd")" />
        </div>

        <div class="form-group">
            <label for="DatumZavrsetkaRezervacije">Datum završetka</label>
            <input type="date" id="endDate" class="form-control" asp-for="DatumZavrsetkaRezervacije"
                   min="@Model.DozvoljeniPocetak.ToString("yyyy-MM-dd")"
                   max="@Model.DozvoljeniKraj.ToString("yyyy-MM-dd")" />
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">Reserve</button>
        </div>
    </form>
}
else
{
    <div class="alert alert-warning">
        All dates for this vehicle are fully reserved. Reservation is currently unavailable.
    </div>
}

<h4>Reserved Dates:</h4>
@if (Model.ReservedDates != null && Model.ReservedDates.Any())
{
    <ul id="reservedDatesList">
        @foreach (var date in Model.ReservedDates)
        {
            <li>@date.ToString("yyyy-MM-dd")</li>
        }
    </ul>
}
else
{
    <p>No dates are currently reserved for this vehicle.</p>
}

@section Scripts
{
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const startDatePicker = document.getElementById("startDate");
            const endDatePicker = document.getElementById("endDate");

            const allowedStart = "@Model.DozvoljeniPocetak:yyyy-MM-dd";
            const allowedEnd = "@Model.DozvoljeniKraj:yyyy-MM-dd";

            if (startDatePicker) startDatePicker.value = allowedStart;
            if (endDatePicker) endDatePicker.value = allowedEnd;
        });

        const reservedDates = @Html.Raw(JsonConvert.SerializeObject(Model.ReservedDates))
            .map(d => d.split('T')[0]); 

        const startDatePicker = document.getElementById("startDate");
        const endDatePicker = document.getElementById("endDate");

        function isReserved(dateString) {
            return reservedDates.includes(dateString);
        }

        function handleBlockedDateSelection(e) {
            const selectedDate = e.target.value;
            if (isReserved(selectedDate)) {
                alert("This date is already reserved. Please choose another date.");
                e.target.value = "";
            }
        }

        if (startDatePicker) {
            startDatePicker.addEventListener("input", handleBlockedDateSelection);
        }
        if (endDatePicker) {
            endDatePicker.addEventListener("input", handleBlockedDateSelection);
        }

        function isDateRangeReserved(start, end) {
            let current = new Date(start);
            const endDate = new Date(end);

            while (current <= endDate) {
                const formatted = current.toISOString().split("T")[0];
                if (reservedDates.includes(formatted)) {
                    return true;
                }
                current.setDate(current.getDate() + 1);
            }
            return false;
        }

        function updateDatePickers() {
            const startDate = new Date(startDatePicker.value);
            const endDate = new Date(endDatePicker.value);

            if (startDatePicker.value && endDatePicker.value) {
                if (isDateRangeReserved(startDate, endDate)) {
                    alert("The selected date range includes already reserved dates.");
                    startDatePicker.value = "";
                    endDatePicker.value = "";
                }
            }
        }

        if (startDatePicker && endDatePicker) {
            startDatePicker.addEventListener("change", updateDatePickers);
            endDatePicker.addEventListener("change", updateDatePickers);
        }
    </script>
}
